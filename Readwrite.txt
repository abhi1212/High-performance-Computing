#include <stdio.h>
#include <time.h>
#include <immintrin.h>
#include <sys/time.h>
#include <omp.h>
#include <chrono>
#include<iostream>
#include<stdlib.h>
using namespace std;


  __m256 read_memory_avx(float* array, int size)
{
         int j=0;
        __m256 accum = _mm256_set_ps(0,0,0,0,0,0,0,0);
        __m256 val = _mm256_set_ps(0,0,0,0,0,0,0,0);

         for(j=0; j<size; j=j+8)
             {
               _mm256_store_ps(&array[j],accum);
             }


      return val;
}



     int main(void)
 {

        #pragma omp parallel
      {
            int j;
            float *array;
            uint32_t size=50000;
            uint32_t size_bytes= size *4;
             __m256 val= _mm256_set_ps(0,0,0,0,0,0,0,0);
            int rc=  posix_memalign((void**)&array, 32, size*sizeof(int));
            double bandwidth= 0;
            double calculation=0;
            for(j=0; j<size;j++)
               {
                  array[j]= 1;
                }
             uint32_t i;
   
            auto start_time = chrono::high_resolution_clock::now();
            for(i=0; i<100; i++)
              {
               val= read_memory_avx(array,size);
              }

   
             auto end_time = chrono::high_resolution_clock::now();
             cout <<"The time in microseconds is "<< chrono::duration_cast<chrono::microseconds>(end_time - start_time).count()<<endl ;
             calculation=( chrono::duration_cast<chrono::microseconds>(end_time - start_time).count() * 10);
             cout<<"Calculation is " <<calculation;
             bandwidth= (size_bytes/calculation);
             cout<<" The total bandwidth is"<< bandwidth<<"GBs";
         }
        return 0;
 }
