#include <iostream>
#include <chrono>
#include <stdio.h>
#include "cuda_runtime.h"
#include "cuda.h"
#include "device_launch_parameters.h"
#define TILESIZE 16

#define HANDLE_ERROR( err ) (HandleError( err, __FILE__, __LINE__ ))

inline  void HandleError( cudaError_t err,
                         const char *file,
                         int line ) {
    if (err != cudaSuccess) {
        printf( "%s in %s at line %d\n", cudaGetErrorString( err ),
                file, line );
        exit( EXIT_FAILURE );
    }
}

__global__ void convolution(float *image, const float* __restrict__ kernel, int n , int m, int k,float *out_image)
{
	int tx=threadIdx.x;
	int ty=threadIdx.y;
	float add=0;
        int mask= k/2;
	
	__shared__ float shared_image[TILESIZE+2][TILESIZE+2];

        int row_output = TILESIZE * blockIdx.y + ty;
        int col_output = TILESIZE * blockIdx.x + tx;
	//printf("Row and col outputs are %d %d\n",row_output,col_output);


	int row_input= row_output-(int)(k/2);  
	int col_input= col_output-(int)(k/2);
	//printf("Row and col outputs are %d %d\n",row_input,col_input);

        if (row_input<m && col_input<n && row_input>=0 && col_input>=0)
	{
		shared_image[ty][tx]= image[row_input *n+ col_input];
	}
	else
	{
		shared_image[ty][tx]= 0.0;
	}

	  __syncthreads();

	 

	if(tx<TILESIZE && ty<TILESIZE)
	{ 
			
		for(int i=0; i<k; i++)
        	{
                	for(int j=0; j<k; j++)
               		{
										
				add+= shared_image[i+ty][j+tx] * kernel[i*k+j];
				//printf("shared value is %f and row index is %d and column index is %d kernel value is %f and kernel index is %d \n", shared_image[i+ty][j+tx],(i+ty),(j+tx),kernel[i*k+j], (i*k+j));	
							

        	        }
        	}
		//printf("Add is %f\n", add);
	}

	 // __syncthreads(); 

	if(row_output<m && row_output>=0 &&  col_output<n && col_output>=0)
	{
		out_image[row_output*n+col_output]= add;
	}
	/*else
	{
	return;
	}*/
	
}


int main (int argc, char* argv[]) {

/***************************************************************Initialization********************************************************************/

  if(argc!=5)
  {
        printf("Not enough arguments"); 
        return 0;
  }

  int m = atoi(argv[1]);
  printf("M is  %d\n",m);

  int n = atoi(argv[2]); //TODO: atoi is an unsafe function
  printf("N is  %d\n",n);

 
  int k = atoi(argv[3]);
  printf("The kernel size is %d\n",k);

  int threadsperblock=atoi(argv[4]);
  printf("Threads per block are %d\n",threadsperblock);

  int totalblocks= (int)(m*n)/threadsperblock;

  int total_pixels= m*n;

  if((total_pixels)%threadsperblock!=0)
  {
        totalblocks= totalblocks+1;

  }

  int i,j;

  //printf("Total blocks are %d\n",totalblocks);

/*******************************************************Allocating Memory to the arrays***************************************************************/
  


  float *image= new float [total_pixels];
  float *kernel= new float[k*k];
  float *output_image= new float[total_pixels];

  float *d_image;
  float *d_outimage;
  float *d_kernel;

  for(i=0; i < total_pixels; i++) 
  {
	image[i]=1.0;		
	output_image[i]=0;        
  }


  for(i = 0; i < k*k; i++)
    {
   
     	kernel[i]= 1;
    }


  uint32_t BLOCKSIZE= (TILESIZE+ (k-1));


// Memory Allocation//
std::chrono::time_point<std::chrono::system_clock> begin, end;

cudaMalloc((void**)&d_image, (total_pixels)*sizeof(float));
cudaMalloc((void**)&d_kernel, (k*k)*sizeof(float));
cudaMalloc((void**)&d_outimage, (total_pixels)*sizeof(float));


cudaMemcpy(d_outimage,output_image,(total_pixels)*sizeof(float),cudaMemcpyHostToDevice);


cudaMemcpy(d_image,image,(total_pixels)*sizeof(float),cudaMemcpyHostToDevice);

//cudaDeviceSynchronize();

cudaMemcpy(d_kernel,kernel,(k*k)*sizeof(float),cudaMemcpyHostToDevice);


const dim3 blocksize(BLOCKSIZE,BLOCKSIZE);
// Launch Kernel

const dim3 gridsize(n/TILESIZE +1,m/TILESIZE+1);
//printf("gridsize.x=%d, gridsize.y=%d\n",gridsize.x,gridsize.y);
begin = std::chrono::system_clock::now();

convolution<<<gridsize,blocksize>>>(d_image,d_kernel,n,m,k,d_outimage);

cudaDeviceSynchronize();

end = std::chrono::system_clock::now();

cudaMemcpy(output_image, d_outimage, (m*n)*sizeof(float),cudaMemcpyDeviceToHost);


/*int p=0;
for(i=0;i<total_pixels;i++)
{
	
	if(p==m)
	{
	printf("\n");
	p=0;
	}
	p++;
	printf("%f ", output_image[i]);
}*/
 std::chrono::duration<double> totaltime = (end-begin);

std::cout<<std::fixed<<" For array size " << n <<" The time required for convolution is "<<(totaltime.count())<<std::endl;

cudaFree(d_image);
cudaFree(d_kernel);
cudaFree(d_outimage);
free(image);
free(kernel);
free(output_image);

}

