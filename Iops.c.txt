<<<<<<< HEAD
#include <stdio.h>
#include <time.h>
#include <immintrin.h>
#include <sys/time.h>
#include <omp.h>
#include <chrono>
#include<iostream>
using namespace std;

int main(void) {


    __m256 a = _mm256_set_ps(1.0, 2.0, 3.0, 4.0, 5.0,6.0,7.0,8.0);
    __m256 b = _mm256_set_ps(1.0, 2.0, 3.0, 4.0, 5.0,6.0,7.0,8.0);
    __m256 c = _mm256_set_ps(1.0, 2.0, 3.0, 4.0, 5.0,6.0,7.0,8.0);
     __m256 d;
     __m256 e;
   volatile long long i;
#pragma omp parallel
{
 // cout << chrono::high_resolution_clock::period::den << endl;
        auto start_time = chrono::high_resolution_clock::now();

    for (i=0; i < 10000000; i++)
    {
      
        d = _mm256_addsub_ps(a, b);
        e= d+d;
      }

    auto end_time = chrono::high_resolution_clock::now();
cout <<"The time in microseconds is"<< chrono::duration_cast<chrono::microseconds>(end_time - start_time).count()<<endl;

        }
                return 0;

        }
=======
#include <stdio.h>
#include <time.h>
#include <immintrin.h>
#include <omp.h>
#include <chrono>
#include <ctime>
#include <iostream>


int main(void)

{
    clock_t t1, t2;
    volatile int i;
    float x = 2.7182;
    long elapsed;
    std::chrono::time_point<std::chrono::system_clock> start, end;

___m256i odds = _mm256_setr_epi32(20, 72, 48, 9, 100, 3, 5, 8);
__m256i evens = _mm256_setr_epi32(20, 72, 48, 9, 100, 3, 5, 8);

 




    #pragma omp parallel
{

       start = std::chrono::system_clock::now();
        for(i=0;i<1000000000;i++)
        {
              __m256i result = _mm256_add_epi32(evens, odds);
        }

       end = std::chrono::system_clock::now();

       std::chrono::duration<double> elapsed_seconds = end-start;
       std::time_t end_time = std::chrono::system_clock::to_time_t(end);

    std::cout << "finished computation at " << std::ctime(&end_time)
      << "elapsed time: " << elapsed_seconds.count() << "s\n";

}


    return 0;
}
>>>>>>> origin/master
