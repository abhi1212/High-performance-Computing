        #include <stdio.h>
        #include <time.h>
        #include <immintrin.h>
        #include <sys/time.h>
        #include <omp.h>
        #include <chrono>
        #include <iostream>

        using namespace std;

        int main(void)
         {

           #pragma omp parallel
             {
               uint32_t i;

           __m256i mask = _mm256_setr_epi32(-20, -72, -48, -9, -100, 3, 5, 8);
           __m256i mask1 = _mm256_setr_epi32(40, -2, 48, -9, -34, 3, 5, 8);
           __m256i mask2 = _mm256_setr_epi32(-20, 56, -48, -95, 100, 3, 50, 8);
           __m256i mask3 = _mm256_setr_epi32(-20, -72, 22, -9, 34, 3, 52, 81);

           __m256i result = _mm256_setr_epi32(0, 0, 0, 0, 0, 0, 0, 0);
           __m256i result1 = _mm256_setr_epi32(0, 0, 0, 0, 0, 0, 0, 0);
           __m256i result2 = _mm256_setr_epi32(0, 0, 0, 0, 0, 0, 0, 0);
           __m256i result3 = _mm256_setr_epi32(0, 0, 0, 0, 0, 0, 0, 0);
           __m256i result4 = _mm256_setr_epi32(0, 0, 0, 0, 0, 0, 0, 0);
           __m256i result5 = _mm256_setr_epi32(0, 0, 0, 0, 0, 0, 0, 0);
           __m256i result6 = _mm256_setr_epi32(0, 0, 0, 0, 0, 0, 0, 0);
           __m256i result7 = _mm256_setr_epi32(0, 0, 0, 0, 0, 0, 0, 0);
           __m256i result8 = _mm256_setr_epi32(0, 0, 0, 0, 0, 0, 0, 0);
             cout << chrono::high_resolution_clock::period::den << endl;
                     auto start_time = chrono::high_resolution_clock::now();

                         for (i=0; i < 100000000; i++)

      {
             result   =   _mm256_add_epi32 (mask, mask1);
            result1  =  _mm256_add_epi32 (mask2, mask3);
            result2  =  _mm256_mul_epi32 (mask1, mask2);
            result3  =  _mm256_add_epi32 (result1, mask2);
            result4  =   _mm256_add_epi32 (mask1, mask3);
             result5  =  _mm256_mul_epi32 (mask3, mask);
            result6  =  _mm256_add_epi32 (mask1,mask2);
            result7  =  _mm256_add_epi32 (mask, mask3);
            result8  =   _mm256_mul_epi32 (result4, mask);
     asm("");
    }
int* res = (int*)&result;
     printf("%d %d %d %d %d %d %d %d\n",
     res[0], res[1], res[2], res[3], res[4], res[5], res[6], res[7]);

    int* res1 = (int*)&result1;
    printf("%d %d %d %d %d %d %d %d\n",
    res1[0], res1[1], res1[2], res1[3], res1[4], res1[5], res1[6], res1[7]);
    int* res2 = (int*)&result2;
    printf("%d %d %d %d %d %d %d %d\n",
    res2[0], res2[1], res2[2], res2[3], res2[4], res2[5], res2[6], res2[7]);

    int* res3 = (int*)&result3;
    printf("%d %d %d %d %d %d %d %d\n",
    res3[0], res3[1], res3[2], res3[3], res3[4], res3[5], res3[6], res3[7]);

    int* res4 = (int*)&result4;
    printf("%d %d %d %d %d %d %d %d\n",
    res4[0], res4[1], res4[2], res4[3], res4[4], res4[5], res4[6], res4[7]);
    int* res5 = (int*)&result5;
    printf("%d %d %d %d %d %d %d %d\n",
    res5[0], res5[1], res5[2], res5[3], res5[4], res5[5], res5[6], res5[7]);

        int* res6 = (int*)&result6;
    printf("%d %d %d %d %d %d %d %d\n",
    res6[0], res6[1], res6[2], res6[3], res6[4], res6[5], res6[6], res6[7]);

        int* res7 = (int*)&result7;
    printf("%d %d %d %d %d %d %d %d\n",
    res7[0], res7[1], res7[2], res7[3], res7[4], res7[5], res7[6], res7[7]);

 auto end_time = chrono::high_resolution_clock::now();
        cout <<"The time in microseconds is"<< chrono::duration_cast<chrono::microseconds>(end_time - start_time).count() << ":"<<endl;
        double j= chrono::duration_cast<chrono::microseconds>(end_time - start_time).count();
        double k= (j/1000000);
        double output = 1152 * (1/(10*k));
        cout<<"Total number of Gflops"<<output<<endl;

}
        return 0;


}